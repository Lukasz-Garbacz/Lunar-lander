LUNARLANDER instrukcja użytkownika


0. Kompilacja
Przed kompilacją należy dołączyć folder lib jako bibliotekę do projektu lunarlander
(w IntelliJ: PPM na nazwie projektu, Open Module Settings, Libraries, +).
Plik LLinfoServer.txt zawiera dane które udostępnia serwer, natomiast
plik LLinfo.txt w folderze data dae lokalne które są czytane jeśli
połączenie z serwerem się nie udało.


1. Zasady gry:


Gra polega na tym iż sterujemy statkiem kosmicznym który pojawia się w powietrzu w pewnym
wybranym punkcie mapy. Naszym zadaniem jest pokierować nim tak aby bezpiecznie wylądować
na kolorowej platformie, nie uderzając w podłoże. Poprawne lądowanie oznacza dotknięcie
platformy z niską prędkością zarówno horyzontalną jak i wertykalną jak i niewielkim
odchyleniem względem osi pionowej.
Zapas paliwa jest ograniczony a używanie silnika konsumuje stałą dawkę paliwa.
W przypadku braku paliwa silnik nie zadziała.
Gracz ma 3 życia, po utracie trzeciego wynik jest zerowany a gracz wraca do pierwszego poziomu.
W razie zderzenia i utraty życia poziom jest ponawiany, tak długo jak gracz ma więcej niż 0 żyć.
Zderzenie się z krawędzią boczną lub górną ekranu skutkuje odbiciem się od niej, wraz z zmianą 
zwrotu wektora prędkości.

W przypadku poprawnego lądowania gracz przechodzi do następnego poziomu, a jego wynik zwiększa się
o ilość paliwa jaka  pozostała w momencie lądowania pomnożoną przez 0.2. Paliwo jest przywracane
po każdym poziomie do maksimum.

Na początku gry gracz zostanie poproszony o podanie nicku, który zostanie wpisany do
listy najwyższych wyników jeżeli gracz takowy osiągnie.


2. Sterowanie


strzałka w górę - załączenie silnika
strzałka w lewo - rotacja w lewo
strzałka w prawo - rotacja w prawo
p - pauza
n - reset poziomu/następny poziom (dostępne tylko po wylądowaniu lub rozbiciu)


3. Parametry gry


Większość parametrów gry jest ładowana z pliku konfiguracyjnego z serwera,
lub jeśli jest on niedostępny z pliku lokalnego.
Na końcu pliku przechowywana jest lista 5 najlepszych wyników.
Parametry oddzielamy przecinkiem, bloki zaczynające się od / nie są czytane.
Listę najwyższych wyników zaczynamy znakiem |.
Dane w pliku są w następującej kolejności:

1. maximum lives player has
2. starting X position of the spaceship (0 is left edge)
3. starting Y position of the spaceship (0 is top edge)
4. gravity strength, standard value = 3
5. acceleration rate of the spaceship, standard value = 30;
6. speed with which the spaceship rotates, standard value = 1
7. maximum horizontal speed for successful landing, standard value = 20
8. maximum vertical speed for successful landing, standard value = 20
9. amount of starting fuel the spaceship has, standard value = 500
10. rate at which spaceship's engine consumes fuel, standard value = 15
11. maximum rotation for successful landing, standard value = 0.1
12. R part of RGB color which applies to the platform, standard value = 0
13. G part of RGB color which applies to the platform, standard value = 255
14. B part of RGB color which applies to the platform, standard value = 0
15. R part of RGB color which applies all terrain lines except for the platform, standard value = 255
16. G part of RGB color which applies all terrain lines except for the platform, standard value = 255
17. B part of RGB color which applies all terrain lines except for the platform, standard value = 255
18. int to determine if terrain should be autogenerated, equals 1 if yes, any other value if not
19. number of points for which their heights will be generated, if autogenerated is not 1 it's a placeholder
20. number of points from which the platform is made, if autogenerated is not 1 it's a placeholder
21. slope angle, determines how high the height difference range is autogenerated points, if autogenerated is not 1 it's a placeholder
22. terrain info, 2 dimensional ArrayList holding each level info in one separate array


przykładowe dane:

3,50,50,3,30,1,20,20,500,
15,0.1,0,255,0,255,255,255,0,
80,4,0.7,
101,134,357,462,143,632,421,412,732,124,641,722,100,511,200,200,200,423,125,631,364,623,432,123,624,;
100,700,100,700,100,700,100,700,100,700,100,700,100,700,100,700,100,700,100,700,100,700,100,100,100,;
0,830,0,830,0,830,0,830,0,830,0,830,0,830,0,830,0,830,0,830,0,830,0,830,0,830,0,830,0,830,0,0,830,0,;
/lifes, starting position (x,y), gravity, accelerationRate, rotationRate, landingXSpeed, landingYSpeed, fuel
/fuelLossRate, maxRotation, platformColor(R,G,B), lineColor(R,G,B), autoGenerateTerrain(1 or 0) 
/if 1 then
/numberOfTerrainPoints, platformSize, slopeAngle, 
/if 0 then
/numberOfTerrainPoints, platformSize, slopeAngle, (any value, just placeholders) 
/terrainPoints, one map per row, end each with ,;

highscores:
|
5,Aralk,
4,SawCon,
3,holon,
2,papaj,
1,deeznu,
|

